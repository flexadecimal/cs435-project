insertRec: insert a new value into the tree.
- edge cases: inserting into empty tree - set root
- i/o: tree but with value added. doesn't return a value
- algo:
  make new node with val
  if root is null, set root to new node
  else if val < left subtree val, recurse with left subtree, otherwise recurse right
- problems: none i can tell

deleteRec: delete a value in the tree
- edge cases: empty tree, but need to handle this
- i/o: tree, but with value removed.
- algo:
  if root is none return root
  if val < root val, recurse left, else recurse right
  else val is root val, must delete root
    deleting single root node case: set root to none
    0/1 child case
    if root has no left child
      return right
    if root has no right childb
      return left
    else (2 children)
      root.val = find_prev(root.right)
      set root val to temp val
      root.right = deleteRec(root.right, root.val)
  return root
- problems: need to return new root to handle 2 child case, where you get prev node

findNextRec: find the inorder successor node
- edge cases: empty tree, need to handle this
- i/o: input tree and val, returns single val (inorder successor)
- algo:
  if root is none return
  if root val = val
    return find_min(root.right)
  else if root val > val recurse with left subtree
  else recurse with right subtree
- problems: none that i can tell

findPrevRec: find the inorder predecessor node
- edge cases: empty tree
- i/o: input tree and val, return single val (predecessor)
- algo:
  if root is none return
  if root val = val
    return find_max(root.left)
  else if root val > val recurse left subtree
  else recurse with right subtree
- problems: none that i can tell

findMinRec: find the min val in the tree (leftmost child)
- edge cases: empty tree
- i/o: root of input tree, returns min node
- algo:
  if root.left is None return root
  else recurse left
- problems: none I can tell

findMaxRec: find the max val in the tree (rightmost child)
- edge cases: empty tree
- i/o: root of input tree, returns max node
- algo:
  if root.right is None return root
  else recurse right
- problems: none I can tell